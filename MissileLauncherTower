//Nergiz Rahimzade 150124055
//This class belongs to Missile Launcher Tower and it's related method(s)/constructor(s)
import javafx.application.*;
import javafx.stage.*;
import javafx.util.Duration;
import javafx.scene.*;
import javafx.scene.shape.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.control.*;
import javafx.event.*;
import javafx.geometry.*;
import javafx.animation.*;
import java.util.*;

public class MissileLauncherTower extends Tower{
	//coordinates of tower
	private double towerX;
	private double towerY;
	
	//radius of the range of the tower
	private double rangeRadius;
	
	//price of the tower
	private int price;
	
	//if a Tower is placed on the map, it is added to this arraylist
	private ArrayList<double[]> towerCoordinates;
	
	//a default constructor for Missile Launcher Tower type
	public MissileLauncherTower()
	{ 
		towerX = 0;
		towerY = 0;
		rangeRadius = 55;
		price = 250;
	}
	
	//a constructor which only takes the coordinate values as parameters
	//you might have noticed that there are no allowance of changing the price and rangeRadius properties and as you move on you will also see that there are no 
	//setter methods for price and rangeRadius properties, the reason is they do not need to be changed and they will have constant values
	public MissileLauncherTower(double towerX, double towerY)
	{
		this.towerX = towerX;
		this.towerY = towerY;
		rangeRadius = 55;
		price = 250;
	}

	//this method returns the Enemys inside Tower's range
	public ArrayList<Enemy> findEnemies(ArrayList<Enemy> enemies)
	{
		ArrayList<Enemy> enemiesInRange = new ArrayList<>();

		for(int i = 0; i < enemies.size(); i++)
		{
			if(isInRange(towerX, towerY,(Enemy)(enemies.get(i)), rangeRadius))
			{
				enemiesInRange.add(enemies.get(i));
			}
		}
		
		if(enemiesInRange.isEmpty())
			return null;
		
		return enemiesInRange;
		
	}
	
	
	//this method shoots the nearest enemy to the tower position
	public Node shootEnemies(ArrayList<Enemy> enemies)
	{
		double startX = towerX;
		double startY = towerY;
		Enemy enemy = enemies.get(0);
		double targetX = enemy.getX();
		double targetY = enemy.getY();
		
		//creating a bullet object for Single Shot Tower
		Bullet bullet = new Bullet(startX, startY, targetX, targetY, 10);
		
		//creating a pane for nodes
		Pane pane = new Pane();
		
		pane.getChildren().addAll(bullet);
		
		Timeline bulletTimeline = new Timeline(new KeyFrame(Duration.millis(16), e ->
		{
			double dx = targetX - startX;
			double dy = targetY - startY;
			double distance = Math.sqrt(dx * dx + dy * dy);
			
			//if the bullet hits the enemy (5 is the number of pixels of threshold/offset) and the enemy is alive - we already gave the Enemy parameter that is
			//in range of tower -, kill the enemy in one shot
			if(distance < 5 && enemy != null && enemy.isActive())
			{
				    //killing all enemies inside the range
					enemies.forEach(eachEnemy -> eachEnemy.setActive(false));
					//bulletTimeline.stop(); //?? why are we stopping the bulletTimeline
					
					//if Enemys are dead after shooting remove the bullet from the pane so that it is not visible anymore and use the explosionEffect
					if(!enemy.isActive())
					{
						pane.getChildren().remove(bullet);
						bullet.explosionEffect(bullet.getEndX(), bullet.getEndY());
					}
			}
			
			//if bullet's distance to the tower is more than or equal to 5 and the Enemy is still alive, that means bullet is still on its' way towards the enemy
			//so we move the bullet using a little math
			else if(enemy.isActive())
			{
				double vx = dx / distance;
				double vy = dy / distance;
				
				double speed = 5;
				bullet.setEndX(bullet.getEndX() + vx * speed); 
				bullet.setEndY(bullet.getEndY() + vy * speed); 
				
			}
		}));
		
		
		bulletTimeline.setCycleCount(Timeline.INDEFINITE);
		bulletTimeline.play();
		
		return bullet;
		
		
		
	}
	
	
	//this method creates a new frame every 16 milliseconds to show the enemy waves and shooting animations 
	//also this method guarantees bullets hits the enemies
	ArrayList<Enemy> enemies = new ArrayList<>();
	public void gameloop(int enemyCount, double timeBetweenSpawns, 
			double enemySpeed, int enemySize, int delayTime)
	{
		Pane gamePane = new Pane();
		Timeline gameloop = new Timeline(new KeyFrame(Duration.millis(16), event ->
		{
			
			WaveDefinition wave = new WaveDefinition(enemyCount, timeBetweenSpawns, enemySpeed, enemySize, delayTime);
			
			
			wave.startNextWave();
			enemies = wave.getActiveEnemies();
			enemies.forEach(eachEnemy -> gamePane.getChildren().add(eachEnemy));
			
			if(enemies != null)
			{
				//removes the enemy both from the ArrayList and the pane if it is not alive
				for(Enemy currentEnemy : enemies)
				{
					if(!currentEnemy.isActive())
					{
						enemies.remove(currentEnemy);
						gamePane.getChildren().remove(currentEnemy);
					}
				}
				//updates the location of enemies that are still alive
				enemies.forEach(currentEnemy -> currentEnemy.update(1));
				
				//adding the Enemys with updated locations
				//???this might cause the program to add unnecessary number of Enemys???
				for(Enemy eachEnemy : enemies)
				{
					gamePane.getChildren().add(eachEnemy);
				}

				//if all Enemy s are either dead or has reached end or enemies is empty
				if(enemies.stream().allMatch(e -> !e.isActive() || e.hasReachedEnd()) || enemies.isEmpty())// && the user still has enough lives
				{
					//if there are more waves left, get the next wave
					if(wave.getCurrentWave() < wave.getTotalWaves())
					{
						wave.startNextWave();
						enemies = wave.getActiveEnemies();
					}
					else
						System.out.println("All waves completed!");
				}
				
				else
				{
					//finding the Enemys inside the range
					ArrayList<Enemy> currentEnemies = findEnemies(enemies);
					if(currentEnemies != null)
					{
						//shooting animation added to the pane
						Node projectile = shootEnemies(currentEnemies);
						gamePane.getChildren().add(projectile);
					}
				}
			}
			
			
		}));
		
		gameloop.setCycleCount(Timeline.INDEFINITE);
		gameloop.play();
	}
	
	
	public boolean isValidPlacement(MissileLauncherTower tower, ArrayList<double[]> coord)
	{
		GameLogic gameLogic = new GameLogic();
		
		for(int i = 0; i < coord.size(); i++)
		{
			double x = (coord.get(i))[0];
			double y = (coord.get(i))[0];
			
			if(tower.getX() != x && tower.getY() != y 
					&& gameLogic.getMoney() >= tower.price && gameLogic.getLives() > 0)
				return true;
			
		}
		
		return false;
		
	}
	
	
	public double getTowerX() {
		return towerX;
	}

	public void setTowerX(double towerX) {
		this.towerX = towerX;
	}

	public double getTowerY() {
		return towerY;
	}

	public void setTowerY(double towerY) {
		this.towerY = towerY;
	}
	
	public double getRangeRadius()
	{
		return rangeRadius;
	}
	
	public int getPrice() {
		return super.getPrice();
	}
	
	public void setPrice()
	{
		super.setPrice(price);
	}

	public ArrayList<double[]> getTowerCoordinates()
	{
		return towerCoordinates;
	}
}

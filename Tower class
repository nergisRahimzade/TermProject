//Nergiz Rahimzade 150124055
//This class is superclass of all types of towers, it's related methods' or constructors' details are given on top of them
import javafx.application.*;
import javafx.stage.*;
import javafx.scene.*;
import javafx.scene.shape.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.control.*;
import javafx.event.*;
import javafx.geometry.*;
import javafx.animation.*;
import java.util.*;

public abstract class Tower extends Group{
	//tower's coordinate properties
	private double towerX;
	private double towerY;
	private int price;


	//default Tower type object; even though abstract class' objects cannot be created by "new" keyword, this constructor was put just in case:)
	public Tower()
	{
		towerX = 0;
		towerY = 0;
	}
	
	
	//shows the range of tower when user is dragging it
	public Circle showRange(Tower tower)
	{
		//creating a circle for the range 
		Circle circle = new Circle(tower.getX(), tower.getY(), 100);
		circle.setFill(Color.color(1, 0.6, 0.6, 0.8));
		
		
		return circle;
		
	}
	
	public boolean isValidPlacement(double x, double y)
	{
		//if there is already a Tower placed on that tile, return false - use getTowerCoordinates() for this
		//if user has enough money, return true;
		//if user has enough lives, return true;
		//
		return true;
	}
	
	//checks whether the enemy is in range of tower, if it is returns true; if not returns false
	public boolean isInRange(double towerX, double towerY, Enemy enemy, double radius)
	{
		//calculating the distance between the tower and enemy in order to compare it with radius of the range of the tower
		double distance = Math.sqrt(Math.pow(enemy.getX() - towerX, 2) + Math.pow(enemy.getY() - towerY, 2));
		
		if(distance <= radius)
			return true;

		else
			return false;
	}
	
	//checks whether a tower already exists on the point user wants to insert tower
	public boolean towerExists()
	{
		return false;
	}

	
	//General getter and setter methods for private properties
	public double getX() {
		return towerX;
	}

	public void setX(double towerX) {
		this.towerX = towerX;
	}

	public double getY() {
		return towerY;
	}

	public void setY(double towerY) {
		this.towerY = towerY;
	}
	
	public void setPrice(int price)
	{
		this.price = price;
	}
	
	public int getPrice()
	{
		return price;
	}
	
/*	private Rectangle towerVisual;
	private Circle rangeIndicator;
	private GameState gameState; // Reference to game state for money check
	private GridCell[][] grid; // Reference to game grid

	public void initDragBehavior(Pane gamePane, GameState gameState, GridCell[][] grid) {
	    this.gameState = gameState;
	    this.grid = grid;
	    towerVisual = (Rectangle) getChildren().get(0);
	    
	    // Create range indicator (initially invisible)
	    rangeIndicator = new Circle(towerX, towerY, rangeRadius);
	    rangeIndicator.setFill(Color.TRANSPARENT);
	    rangeIndicator.setStroke(Color.RED);
	    rangeIndicator.setStrokeWidth(2);
	    rangeIndicator.setOpacity(0.5);
	    rangeIndicator.setVisible(false);
	    gamePane.getChildren().add(rangeIndicator);
	    
	    // Setup drag behavior
	    setOnMousePressed(event -> {
	        rangeIndicator.setVisible(true);
	    });
	    
	    setOnMouseDragged(event -> {
	        double newX = event.getSceneX();
	        double newY = event.getSceneY();
	        
	        // Update tower position
	        setLayoutX(newX - towerX);
	        setLayoutY(newY - towerY);
	        
	        // Update range indicator position
	        rangeIndicator.setCenterX(newX);
	        rangeIndicator.setCenterY(newY);
	    });
	    
	    setOnMouseReleased(event -> {
	        rangeIndicator.setVisible(false);
	        
	        // Get the grid cell at release position
	        int col = (int)(event.getSceneX() / grid[0][0].getWidth());
	        int row = (int)(event.getSceneY() / grid[0][0].getHeight());
	        
	        // Check if valid placement
	        if (isValidPlacement(row, col)) {
	            // Check if player has enough money
	            if (gameState.getMoney() >= getPrice()) {
	                // Place tower on grid
	                placeOnGrid(row, col);
	                // Charge player
	                gameState.spendMoney(getPrice());
	            } else {
	                // Reset position if can't afford
	                returnToOrigin();
	                showErrorMessage("Not enough money!");
	            }
	        } else {
	            // Reset position if invalid placement
	            returnToOrigin();
	        }
	    });
	}

	private boolean isValidPlacement(int row, int col) {
	    // Check if within grid bounds
	    if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) {
	        return false;
	    }
	    
	    // Check if cell is a path cell
	    if (grid[row][col].isPathCell()) {
	        return false;
	    }
	    
	    // Check if cell already has a tower
	    if (grid[row][col].hasTower()) {
	        return false;
	    }
	    
	    return true;
	}

	private void placeOnGrid(int row, int col) {
	    // Update tower position to grid cell center
	    double centerX = grid[row][col].getX() + grid[row][col].getWidth() / 2;
	    double centerY = grid[row][col].getY() + grid[row][col].getHeight() / 2;
	    
	    setLayoutX(centerX - towerX);
	    setLayoutY(centerY - towerY);
	    
	    // Mark grid cell as occupied
	    grid[row][col].setTower(this);
	}

	private void returnToOrigin() {
	    // Return to original position in tower selection panel
	    setLayoutX(0);
	    setLayoutY(0);
	}

	private void showErrorMessage(String message) {
	    // Display error message (implementation depends on your UI)
	    System.out.println(message);
	}*/
	

}

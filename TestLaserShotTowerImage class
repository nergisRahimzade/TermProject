import javafx.application.*;
import javafx.stage.*;
import javafx.util.Duration;
import javafx.scene.*;
import javafx.scene.shape.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.control.*;
import javafx.scene.image.ImageView;
import javafx.scene.image.WritableImage;
import javafx.event.*;
import javafx.geometry.*;
import javafx.animation.*;
import java.util.*;

public class TestLaserShotTowerImage extends Group{
	private ImageView laserTowerImage;
	
	
	public void image()
	{
		Pane pane = new Pane();
		
		Rectangle mainRec = new Rectangle(0, 0, 15, 30);
		mainRec.setFill(Color.BISQUE);
		
		Rectangle mainSideRecLarge = new Rectangle(10, 30);
		mainSideRecLarge.setFill(Color.BROWN);
		mainSideRecLarge.xProperty().bind(mainRec.xProperty().add(mainRec.getWidth()));
		mainSideRecLarge.yProperty().bind(mainRec.yProperty());
		
		double widthMiniSq = 4;
		double widthMiniSideRec = 2;
		double gap = (mainRec.getWidth() + mainSideRecLarge.getWidth() - 4 * (widthMiniSq + widthMiniSideRec)) / 3;
		
		Rectangle miniSq1_1 = new Rectangle(widthMiniSq, widthMiniSq);
		miniSq1_1.xProperty().bind(mainRec.xProperty());
		miniSq1_1.yProperty().bind(mainRec.yProperty().subtract(miniSq1_1.getHeight()));
		miniSq1_1.setFill(Color.BISQUE);
		
		Rectangle miniSq2_1 = new Rectangle(widthMiniSq, widthMiniSq);
		miniSq2_1.xProperty().bind(miniSq1_1.xProperty().add(miniSq1_1.getWidth() + widthMiniSideRec + gap));
		miniSq2_1.yProperty().bind(miniSq1_1.yProperty());
		miniSq2_1.setFill(Color.BISQUE);
		
		Rectangle miniSq3_1 = new Rectangle(widthMiniSq, widthMiniSq);
		miniSq3_1.xProperty().bind(miniSq2_1.xProperty().add(miniSq2_1.getWidth() + widthMiniSideRec + gap));
		miniSq3_1.yProperty().bind(miniSq2_1.yProperty());
		miniSq3_1.setFill(Color.BISQUE);
		
		Rectangle miniSq4_1 = new Rectangle(widthMiniSq, widthMiniSq);
		miniSq4_1.xProperty().bind(miniSq3_1.xProperty().add(miniSq3_1.getWidth() + widthMiniSideRec + gap));
		miniSq4_1.yProperty().bind(miniSq3_1.yProperty());
		miniSq4_1.setFill(Color.BISQUE);
		
		Rectangle miniSideRec1_1 = new Rectangle(widthMiniSideRec, widthMiniSq);
		miniSideRec1_1.xProperty().bind(miniSq1_1.xProperty().add(widthMiniSq));
		miniSideRec1_1.yProperty().bind(miniSq1_1.yProperty());
		miniSideRec1_1.setFill(Color.BROWN);
		
		Rectangle miniSideRec2_1 = new Rectangle(widthMiniSideRec, widthMiniSq);
		miniSideRec2_1.xProperty().bind(miniSq2_1.xProperty().add(widthMiniSq));
		miniSideRec2_1.yProperty().bind(miniSq2_1.yProperty());
		miniSideRec2_1.setFill(Color.BROWN);
		
		Rectangle miniSideRec3_1 = new Rectangle(widthMiniSideRec, widthMiniSq);
		miniSideRec3_1.xProperty().bind(miniSq3_1.xProperty().add(widthMiniSq));
		miniSideRec3_1.yProperty().bind(miniSq3_1.yProperty());
		miniSideRec3_1.setFill(Color.BROWN);
		
		Rectangle miniSideRec4_1 = new Rectangle(widthMiniSideRec, widthMiniSq);
		miniSideRec4_1.xProperty().bind(miniSq4_1.xProperty().add(widthMiniSq));
		miniSideRec4_1.yProperty().bind(miniSq4_1.yProperty());
		miniSideRec4_1.setFill(Color.BROWN);
		
		double doorWidth = 6;
		double doorHeight = 12;
		double doorGap = (mainRec.getWidth() - 2 * doorHeight) / 2;
		
		Rectangle doorRec1_1 = new Rectangle(doorWidth, doorHeight);
		doorRec1_1.xProperty().bind(mainRec.xProperty().add((mainRec.getWidth() - doorRec1_1.getWidth()) / 2));
		doorRec1_1.yProperty().bind(mainRec.yProperty().add(mainRec.getHeight() - doorRec1_1.getHeight()));
		doorRec1_1.setFill(Color.BROWN);
		
		Rectangle doorRec2_1 = new Rectangle(doorWidth, doorHeight);
		doorRec2_1.xProperty().bind(mainRec.xProperty().add((mainRec.getWidth() - doorRec1_1.getWidth()) / 2));
		doorRec2_1.yProperty().bind(doorRec1_1.yProperty().subtract(doorHeight + doorGap));
		doorRec2_1.setFill(Color.BROWN);
		
		pane.getChildren().addAll(mainRec, mainSideRecLarge, miniSq1_1, miniSq2_1, miniSq3_1, miniSq4_1, miniSideRec1_1, miniSideRec2_1, miniSideRec3_1, miniSideRec4_1, doorRec1_1, doorRec2_1);
		
		
		Rectangle mainSq = new Rectangle(20, 20);
		mainSq.xProperty().bind(mainRec.xProperty().subtract(((mainSq.getWidth() + 10) - (mainRec.getWidth() + mainSideRecLarge.getWidth())) / 2));
		mainSq.yProperty().bind(mainRec.yProperty().add(mainRec.getHeight() - mainSq.getHeight()));
		mainSq.setFill(Color.BISQUE);
		
		Rectangle mainSideRecMid = new Rectangle(10, 20);
		mainSideRecMid.setFill(Color.BROWN);
		mainSideRecMid.xProperty().bind(mainSq.xProperty().add(mainSq.getWidth()));
		mainSideRecMid.yProperty().bind(mainSq.yProperty());
		
		double gap2 = (mainSq.getWidth() + mainSideRecMid.getWidth() - 4 * (widthMiniSq + widthMiniSideRec)) / 3;
		
		Rectangle miniSq1 = new Rectangle(widthMiniSq, widthMiniSq);
		miniSq1.xProperty().bind(mainSq.xProperty());
		miniSq1.yProperty().bind(mainSq.yProperty().subtract(miniSq1.getHeight()));
		miniSq1.setFill(Color.BISQUE);
		
		Rectangle miniSq2 = new Rectangle(widthMiniSq, widthMiniSq);
		miniSq2.xProperty().bind(miniSq1.xProperty().add(miniSq1.getWidth() + widthMiniSideRec + gap2));
		miniSq2.yProperty().bind(miniSq1.yProperty());
		miniSq2.setFill(Color.BISQUE);
		
		Rectangle miniSq3 = new Rectangle(widthMiniSq, widthMiniSq);
		miniSq3.xProperty().bind(miniSq2.xProperty().add(miniSq2.getWidth() + widthMiniSideRec + gap2));
		miniSq3.yProperty().bind(miniSq2.yProperty());
		miniSq3.setFill(Color.BISQUE);
		
		Rectangle miniSq4 = new Rectangle(widthMiniSq, widthMiniSq);
		miniSq4.xProperty().bind(miniSq3.xProperty().add(miniSq3.getWidth() + widthMiniSideRec + gap2));
		miniSq4.yProperty().bind(miniSq3.yProperty());
		miniSq4.setFill(Color.BISQUE);
		
		Rectangle miniSideRec1 = new Rectangle(widthMiniSideRec, widthMiniSq);
		miniSideRec1.xProperty().bind(miniSq1.xProperty().add(widthMiniSq));
		miniSideRec1.yProperty().bind(miniSq1.yProperty());
		miniSideRec1.setFill(Color.BROWN);
		
		Rectangle miniSideRec2 = new Rectangle(widthMiniSideRec, widthMiniSq);
		miniSideRec2.xProperty().bind(miniSq2.xProperty().add(widthMiniSq));
		miniSideRec2.yProperty().bind(miniSq2.yProperty());
		miniSideRec2.setFill(Color.BROWN);
		
		Rectangle miniSideRec3 = new Rectangle(widthMiniSideRec, widthMiniSq);
		miniSideRec3.xProperty().bind(miniSq3.xProperty().add(widthMiniSq));
		miniSideRec3.yProperty().bind(miniSq3.yProperty());
		miniSideRec3.setFill(Color.BROWN);
		
		Rectangle miniSideRec4 = new Rectangle(widthMiniSideRec, widthMiniSq);
		miniSideRec4.xProperty().bind(miniSq4.xProperty().add(widthMiniSq));
		miniSideRec4.yProperty().bind(miniSq4.yProperty());
		miniSideRec4.setFill(Color.BROWN);
		
		Rectangle doorRec = new Rectangle(mainSq.getHeight() / 3 ,mainSq.getHeight() / 2);
		doorRec.xProperty().bind(mainSq.xProperty().add((mainSq.getWidth() - doorRec.getWidth()) / 2));
		doorRec.yProperty().bind(mainSq.yProperty().add(mainSq.getHeight() - doorRec.getHeight()));
		doorRec.setFill(Color.BROWN);
		
		pane.getChildren().addAll(mainSq, mainSideRecMid, miniSq1, miniSq2, miniSq3, miniSq4, miniSideRec1, miniSideRec2, miniSideRec3, miniSideRec4, doorRec);
	
		WritableImage snapshot = pane.snapshot(new SnapshotParameters(), null);
		laserTowerImage = new ImageView(snapshot);
	}
	
    public ImageView getLaserTowerImage()
    {
    	return laserTowerImage;
    }


}

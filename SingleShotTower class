//Nergiz Rahimzade 150124055
//This class belongs to SingleShotTower and it's related methods, more details are given on the method/constructor(s)
import javafx.application.*;
import javafx.stage.*;
import javafx.util.Duration;
import javafx.scene.*;
import javafx.scene.shape.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.control.*;
import javafx.event.*;
import javafx.geometry.*;
import javafx.animation.*;
import java.util.*;

public class SingleShotTower extends Tower{
	//coordinate properties of tower
	private double towerX;
	private double towerY;
	
	//Timeline object for bullet animation
	private Timeline bulletTimeline;
	
	//radius of the range of the tower
	private double rangeRadius;
	
	//price of the tower
	private int price;
	
	//a default constructor for Single Shot Tower type
	public SingleShotTower()
	{
		towerX = 0;
		towerY = 0;
		rangeRadius = 30;
		price = 50;
	}
	
	//a constructor which only takes the coordinate values as parameters
	//you might have noticed that there are no allowance of changing the price and rangeRadius properties and as you move on you will also see that there are no 
	//setter methods for price and rangeRadius properties, the reason is they do not need to be changed and they will have constant values
	public SingleShotTower(double towerX, double towerY)
	{
		this.towerX = towerX;
		this.towerY = towerY;
		rangeRadius = 30;
		price = 50;
	}
	
	
	//this method return one Enemy inside the range of the tower
	//it takes an ArrayList as a parameter, this ArrayList represents the enemies of each wave
	public Enemy findEnemy(ArrayList<Enemy> enemies)
	{
		ArrayList<Enemy> enemiesInRange = new ArrayList<>();

		for(int i = 0; i < enemies.size(); i++)
		{
			if(isInRange(towerX, towerY,(Enemy)(enemies.get(i)), rangeRadius))
			{
				enemiesInRange.add(enemies.get(i));
			}
		}
		
		if(enemiesInRange.isEmpty())
			return null;
		
		double dxi = ((Enemy)(enemiesInRange.get(0))).getX() - towerX; 
		double dyi = ((Enemy)(enemiesInRange.get(0))).getY() - towerY; 
		double minDistance = Math.sqrt(dxi * dxi + dyi * dyi); /*assuming that the first element inside the enemiesInRange ArrayList 
		                                                          is the closest enemy to the tower*/
		
		//calculating the distance between all the enemies in range and the tower
		for(int i = 1; i < enemiesInRange.size(); i++)
		{
			double dxf = ((Enemy)(enemiesInRange.get(i))).getX() - towerX;
			double dyf = ((Enemy)(enemiesInRange.get(i))).getY() - towerY;
			double distance = Math.sqrt(dxf * dxf + dyf * dyf);
			
			//if current enemies distance to the tower is less than minimum distance, setting minDistance as distance and returning the closest enemy to the tower
			if((distance < minDistance) && ((Enemy)(enemiesInRange.get(i))).isActive())
			{
				minDistance = distance;
				return (Enemy)(enemiesInRange.get(i));
			}
	
			
		}
		return (Enemy)(enemiesInRange.get(0));
		
	}
	
	//this method shoots the nearest enemy to the tower position
	public Node shootEnemy(Enemy enemy)
	{
		double startX = towerX;
		double startY = towerY;
		double targetX = enemy.getX();
		double targetY = enemy.getY();
		
		//creating a bullet object for Single Shot Tower
		Bullet bullet = new Bullet(startX, startY, targetX, targetY, 10);
		
		//creating a pane for nodes
		Pane pane = new Pane();
		
		pane.getChildren().addAll(bullet);
		
		this.bulletTimeline = new Timeline(new KeyFrame(Duration.millis(16), e ->
		{
			double dx = targetX - startX;
			double dy = targetY - startY;
			double distance = Math.sqrt(dx * dx + dy * dy);
			
			//if the bullet hits the enemy (5 is the number of pixels of threshold/offset) and the enemy is alive - we already gave the Enemy parameter that is
			//in range of tower -, give a damage magnitude 10 to the enemy
			if(distance < 5 && enemy != null && enemy.isActive())
			{
					enemy.damage(10);
					bulletTimeline.stop(); //?? why are we stopping the bulletTimeline
					
					//if Enemy is dead after shooting remove the bullet from the pane so that it is not visible anymore and use the explosionEffect
					if(!enemy.isActive())
					{
						pane.getChildren().remove(bullet);
						bullet.explosionEffect(bullet.getEndX(), bullet.getEndY());
					}
			}
			
			//if bullet's distance to the tower is more than or equal to 5 and it is still alive, that means enemy is still on its' way towards the tower
			//so we move the bullet using a little math
			else if(enemy.isActive())
			{
				double vx = dx / distance;
				double vy = dy / distance;
				
				double speed = 8;
				bullet.setEndX(bullet.getEndX() + vx * speed); 
				bullet.setEndY(bullet.getEndY() + vy * speed); 
				
			}
		}));
		
		
		bulletTimeline.setCycleCount(Timeline.INDEFINITE);
		bulletTimeline.play();
		
		return bullet;
		
		
		
	}
	
	//FIND OUT HOW TO MAKE THE WAVE CLASS VISIBLE
	//creates a kind of a animation frame every 16 milliseconds that will show the bullets and the enemy wave
	ArrayList<Enemy> currentEnemies = new ArrayList<>();
	public void gameloop(Enemy enemy) //A PROBLEM HERE - how can i create a gameloop class that does not take Enemy object as a parameter
	{	
		WaveManager wave = new WaveManager(enemy.getPathCoordinates(), enemy.getTileSize());
		currentEnemies = wave.getNextWave();

		Pane gamePane = new Pane();
		
		//adds all the Enemys to the pane because none of them had been shot yet
		for(Enemy eachEnemy : currentEnemies)
		{
            gamePane.getChildren().add(eachEnemy);
		}
		
		Timeline gameloop = new Timeline(new KeyFrame(Duration.millis(16), e ->
		{	
			if(currentEnemies != null)
			{
				
				
				//first removes the Enemy if it is dead and then updates the coordinates of each enemy every 16 milliseconds
				currentEnemies.removeIf(currentEnemy -> !currentEnemy.isActive());
				currentEnemies.forEach(currentEnemy -> currentEnemy.update(1));
				
				//adds the Enemys updated versions to the pane 
				for(Enemy eachEnemy : currentEnemies)
				{
					gamePane.getChildren().add(eachEnemy);
				}
				
				//if all Enemys inside currentEnemies ArrayList is either dead or has reached the end of the map or currentEnemies is empty-> 
				//if there are still waves left -> 
				// make currentEnemies as the next wave of enemies
				if(currentEnemies.stream().allMatch(currentEnemy -> !currentEnemy.isActive() || currentEnemy.hasReachedEnd()) || currentEnemies.isEmpty())
				{
					if(wave.hasMoreWaves())
					{
						currentEnemies = wave.getNextWave();
						for(int i = 0; i < currentEnemies.size(); i++)
							gamePane.getChildren().add((Enemy)(currentEnemies.get(i)));
					}
					else
						System.out.println("All waves completed!");
				}
				
				//if there are still either alive enemies or enemies that hasn't reached end -> find the closest enemy with findEnemy method , 
				//if target is not null and is in range -> shoot the enemy with shootEnemy method
				else
				{
					Enemy target = findEnemy(currentEnemies);
					if(target != null)
					{
						Node projectile = shootEnemy(target);
						gamePane.getChildren().add(projectile);
					}
				}
			}
					
						
			
			
		}));
		
		//play the animation
		gameloop.setCycleCount(Timeline.INDEFINITE);
		gameloop.play();
		
	}
	
	//checks if the user has enough money to buy the tower
			//if money is enough return true, else return false 
	@Override
	public boolean buyable()
	{
		return false;
	}
	
	//General getter and setter methods
	public double getTowerX() {
		return towerX;
	}

	public void setTowerX(double towerX) {
		this.towerX = towerX;
	}

	public double getTowerY() {
		return towerY;
	}

	public void setTowerY(double towerY) {
		this.towerY = towerY;
	}

	public double getRangeRadius() {
		return rangeRadius;
	}

	public int getPrice() {
		return price;
	}

	
	
}

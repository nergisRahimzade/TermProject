//Nergiz Rahimzade 150124055
//This class belongs to Laser Tower and contains it's related method(s)/constructor(s)/properties 
//Details about methods are given above them and inside methods if needed
import javafx.application.*;
import javafx.stage.*;
import javafx.util.Duration;
import javafx.scene.*;
import javafx.scene.shape.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.control.*;
import javafx.event.*;
import javafx.geometry.*;
import javafx.animation.*;
import java.util.*;

public class LaserTower extends Tower{
	//coordinate properties of towers
	private double towerX;
	private double towerY;
	
	//radius of the range of the tower
	private double rangeRadius;
	
	//price of the tower
	private int price;
	
	//a default constructor with given default values
	public LaserTower() 
	{
		towerX = 0;
		towerY = 0;
		rangeRadius = 30;
		price = 120;
	}
	
	//a constructor which only takes the coordinate values as parameters
	//you might have noticed that there are no allowance of changing the price and rangeRadius properties and as you move on you will also see that there are no 
	//setter methods for price and rangeRadius properties, the reason is they do not need to be changed and they will have constant values
	public LaserTower(double towerX, double towerY)
	{
		this.towerX = towerX;
		this.towerY = towerY;
		rangeRadius = 30;
		price = 120;
	}
	
	
	//this method returns an ArrayList of Enemies inside the range of the tower 
	//it takes the enemy waves as ArrayList and finds the enemies inside range
	public ArrayList<Enemy> findEnemies(ArrayList<Enemy> enemies)
	{
		ArrayList<Enemy> enemiesInRange = new ArrayList<>();

		for(int i = 0; i < enemies.size(); i++)
		{
			if(isInRange(towerX, towerY,(Enemy)(enemies.get(i)), rangeRadius))
			{
				enemiesInRange.add(enemies.get(i));
			}
		}
		
		if(enemiesInRange.isEmpty())
			return null;
		
		return enemiesInRange;
		
	}
	
	//this method shoots the enemies within range with lasers and returns the Laser objects as a List in Node type,
	//it takes the enemiesInRange from findEnemies method as an argument
	// lasers are returned in Node type for them to be able to added to Pane
	public List<Node> shootEnemies(ArrayList<Enemy> enemies)
	{
		List<Node> list = new ArrayList<>();
		
		//Pane created to add the Laser objects and make them visible on Scene
		Pane pane = new Pane();
		
		
		//a Timeline object is created to make an animation of several or single Lasers being shot
		Timeline laserTimeline = new Timeline(new KeyFrame(Duration.millis(16), e ->
		{
			if(!enemies.isEmpty())
			{
				//if there are enemies inside range, change the endX and endY properties of laser
				for(Enemy enemy : enemies)
				{

					Laser laser = new Laser(towerX, towerY, enemy.getX(), enemy.getY());
					
					pane.getChildren().add(laser);
					
					double dx = Math.abs(laser.getEndX() - enemy.getX());
					double dy = Math.abs(laser.getEndY() - enemy.getY());
					double distance = Math.sqrt(dx * dx + dy * dy);
					
					//if enemy is alive and the distance between the Tower and Laser is less than the threshold value and enemy is not null ->
					//give a damage of magnitude 5 and add the laser created to the ArrayList, also add the laser to the pane
					//notice that the damage LaserTower gives is less than SingleShotTower
					if(enemy.isActive() && distance < 5 && enemy != null)
					{
						enemy.damage(5);
						list.add(laser);
						pane.getChildren().add(laser);
						
						if(!enemy.isActive())
						{
							list.remove(laser);
							pane.getChildren().remove(laser);
							laser.explosionEffect(laser.getEndX(), laser.getEndY());
						}
					}
					
				/*	else if(enemy.isActive())
					{

						//not sure about this calculation
						double vx = dx / distance;
						double vy = dy / distance;
						
						double speed = 8;
						laser.setEndX(laser.getEndX() + vx * speed); 
						laser.setEndY(laser.getEndY() + vy * speed);
					}*/
				}
			}
			
			
		}));
		
		
		//play the animation
		laserTimeline.setCycleCount(Timeline.INDEFINITE);
		laserTimeline.play();
		
		return list;
	}
	
	
	//this method is created to make the enemy Waves visible and check the enemies every 16 milliseconds
	ArrayList<Enemy> enemies = new ArrayList<>();
	public void gameloop(Enemy enemy)
	{
		WaveManager wave = new WaveManager(enemy.getPathCoordinates(), enemy.getTileSize());
		Pane gamePane = new Pane();
		
		Timeline gameloop = new Timeline(new KeyFrame(Duration.millis(16), event ->
		{
			enemies = wave.getNextWave();		
			
			if(enemies != null)
			{
				//if enemies are not null, update each enemies inside location
				enemies.removeIf(currentEnemy -> !currentEnemy.isActive());
				enemies.forEach(currentEnemy -> currentEnemy.update(1));
				
				//adding the updated versions of Enemys
				for(Enemy eachEnemy : enemies)
				{
					gamePane.getChildren().add(eachEnemy);
				}
				
				//if all Enemys inside enemies ArrayList is either dead or has reached end -> if there are still some waves left 
				//-> give the next Enemy wave
				if(enemies.stream().allMatch(e -> !e.isActive() || e.hasReachedEnd()) || enemies.isEmpty()) // && the user has still life
				{
					if(wave.hasMoreWaves())
					{
						enemies = wave.getNextWave();
						for(Enemy eachEnemy : enemies)
						{
							gamePane.getChildren().add(eachEnemy);
						}
					}
						
					else
						System.out.println("All waves completed!");
				}
				
				//if there are some Enemys either alive or hasn't reached the end -> find the closest Enemys with findEnemies method
				//-> pass the ArrayList as an parameter to the shootEnemies method to shoot the enemies
				else
				{
					ArrayList<Enemy> enemiesInRange = findEnemies(enemies);
					if(enemiesInRange != null)
					{
						List<Node> projectile = shootEnemies(enemiesInRange);
						for(Node node : projectile)
							gamePane.getChildren().add(node);
					}
					
				}
			}
				
				
		}));
		
		//play the animation
		gameloop.setCycleCount(Timeline.INDEFINITE);
		gameloop.play();

	}
	
	
	//if user has enough money, place the tower; if not, drag the tower but do not place it
	@Override
	public boolean buyable()
	{
		return false;
	}
	
	//General getter and setter methods
	public double getX() {
		return towerX;
	}

	public void setX(double towerX) {
		this.towerX = towerX;
	}

	public double getY() {
		return towerY;
	}

	public void setsY(double towerY) {
		this.towerY = towerY;
	}
	
	public double getRangeRadius()
	{
		return rangeRadius;
	}
	
	public int getPrice()
	{
		return price;
	}


}

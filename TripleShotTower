//Nergiz Rahimzade 150124055
//This class belongs to Triple Shot Tower and it's related method(s)/constructor(s)

import javafx.application.*;
import javafx.stage.*;
import javafx.util.Duration;
import javafx.scene.*;
import javafx.scene.shape.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.control.*;
import javafx.event.*;
import javafx.geometry.*;
import javafx.animation.*;
import java.util.*;

public class TripleShotTower extends Tower{
	//coordinates of the tower
	private double towerX;
	private double towerY;
	
	//radius of the range of the tower
	private double rangeRadius;
	
	//price of the tower
	private int price;
	
	ArrayList<double[]> towerCoordinates;
	
	//default constructor with explicitly given default values
	public TripleShotTower()
	{
		towerX = 0;
		towerY = 0;
		rangeRadius = 30;
		price = 150;
	}
	
	//a constructor which only takes the coordinate values as parameters
    //you might have noticed that there are no allowance of changing the price and rangeRadius properties and as you move on you will also see that there are no 
    //setter methods for price and rangeRadius properties, the reason is they do not need to be changed and they will have constant values
	public TripleShotTower(double towerX, double towerY)
	{
		this.towerX = towerX;
		this.towerY = towerY;
		rangeRadius = 30;
		price = 150;
	}
	
	//this method returns 3 Enemys inside the range of the tower
	//takes the current Enemy Wave as a parameter
	public ArrayList<Enemy> findEnemies(ArrayList<Enemy> enemies)
	{
		ArrayList<Enemy> enemiesInRange = new ArrayList<>();
		//variable count, counts the enemies inside the range
		int count = 0;

		for(int i = 0; i < enemies.size(); i++)
		{
			//for each Enemy in the wave, checks whether the enemies is inside the range by using the enemiesInRange() method inside the superclass
			//and adds the first 3 enemies inside the range to enemiesInRange
			if(isInRange(towerX, towerY,(Enemy)(enemies.get(i)), rangeRadius))
			{
				enemiesInRange.add(enemies.get(i));
				count++;
			}
			
			if(count == 3)
				break;
		}
		
		if(enemiesInRange.isEmpty())
			return null;
		
		return enemiesInRange;
		
	}
	
	//this method shoots the Enemys inside the range with Bullet animations
	//takes the enemiesInRange ArrayList created in findEnemies as a parameter
	public List<Node> shootEnemies(ArrayList<Enemy> enemies)
	{
		GameLogic gameLogic = new GameLogic();
		List<Node> list = new ArrayList<>();
		double startX = towerX;
		double startY = towerY;
		Pane pane = new Pane();
		
		Timeline bulletTimeline = new Timeline(new KeyFrame(Duration.millis(16), e ->
		{
			if(!enemies.isEmpty())
			{
				for(Enemy enemy : enemies)
				{
					double targetX = enemy.getX();
					double targetY = enemy.getY();
					Bullet bullet = new Bullet(startX, startY, targetX, targetY, 10);
					pane.getChildren().add(bullet);
					
					double dx = targetX - startX;
					double dy = targetY - startY;
					
					double distance = Math.sqrt(dx * dx + dy *dy);
					
					//if Enemy is in distance with threshold value and is alive, damage the enemy with magnitude 15 and add the bullet to the list (List<Node>)
					if(enemy.isActive() && distance < 5 && enemy != null)
					{
						enemy.damage(15);
						gameLogic.updateInfo();
						list.add(bullet);
						for(Node node : list)
							pane.getChildren().add(node); //maybe this for loop is not needed since we are already adding the Bullet to the pane before adding
						                                  //it to the list ??? 
						
						//if Enemy is dead after shooting, remove the bullet from the pane so that it is not visible anymore, and use the explosionEffect
						if(!enemy.isActive())
						{
							list.remove(bullet);
							pane.getChildren().remove(bullet);
							bullet.explosionEffect(bullet.getEndX(), bullet.getEndY());
						}
					}
					
					//If enemy is still alive but distance between the Bullet and the Enemy is more than or equal to threshold value
					//it means the Bullet is still moving towards Enemy
					else if(enemy.isActive())
					{
						double vx = dx / distance;
						double vy = dy / distance;
						
						double speed = 8;
						bullet.setEndX(bullet.getEndX() + vx * speed); 
						bullet.setEndY(bullet.getEndY() + vy * speed);
					}
					
				}
			}
			
		}));
		
		//playing the animation
		bulletTimeline.setCycleCount(Timeline.INDEFINITE);
		bulletTimeline.play();
		
		return list;
	}
	
	
	//this method is created to make the enemy Waves visible and check the enemies every 16 milliseconds
	ArrayList<Enemy> enemies = new ArrayList<>();
	public void gameloop(int enemyCount, double timeBetweenSpawns, 
			double enemySpeed, int enemySize, int delayTime)
	{
		Timeline gameloop = new Timeline(new KeyFrame(Duration.millis(16), event ->
		{
			WaveDefinition wave = new WaveDefinition(enemyCount, timeBetweenSpawns, enemySpeed, enemySize, delayTime);
			Pane gamePane = new Pane();
			
			wave.startNextWave();
			enemies = wave.getActiveEnemies();
			enemies.forEach(eachEnemy -> gamePane.getChildren().add(eachEnemy));
			
			if(enemies != null)
			{
				
				//removes the enemy both from the ArrayList and the pane if it is not alive
				for(Enemy currentEnemy : enemies)
				{
					if(!currentEnemy.isActive())
					{
						enemies.remove(currentEnemy);
						gamePane.getChildren().remove(currentEnemy);
					}
				}
				enemies.forEach(currentEnemy -> currentEnemy.update(1));
				
				//adding the updated enemies to the pane
				//???Would adding enemies twice create a problem inside Pane???
				for(Enemy enemyUpdated : enemies)
				{
					gamePane.getChildren().add(enemyUpdated);
				}
				

				//if all Enemy s is either dead or has reached end or enemies is e ->
				//get the next wave and if there is a Enemy Wave left ->
				//add the Enemy s of next wave to the pane
				if(enemies.stream().allMatch(e -> !e.isActive() || e.hasReachedEnd()))// && the user still has enough lives
				{
					if(wave.getCurrentWave() < wave.getTotalWaves())
					{
						wave.startNextWave();
						enemies = wave.getActiveEnemies();
					}
					
					else
						System.out.println("All waves completed!");
				}
				
				//if there are some still alive enemies left or some enemies has not reached the end, find the 3 closest enemies and shoot them
				//also add the shootings to the pane
				else
				{
					ArrayList<Enemy> currentEnemies = findEnemies(enemies);
					if(currentEnemies != null)
					{
						List<Node> projectile = shootEnemies(currentEnemies);
						projectile.forEach(node -> gamePane.getChildren().add(node));
					}
				}
			}
			
			
		}));
		
		gameloop.setCycleCount(Timeline.INDEFINITE);
		gameloop.play();
	}
	
	public boolean isValidPlacement(TripleShotTower tower, ArrayList<double[]> coord)
	{
		GameLogic gameLogic = new GameLogic();
		
		for(int i = 0; i < coord.size(); i++)
		{
			double x = (coord.get(i))[0];
			double y = (coord.get(i))[0];
			
			if(tower.getX() != x && tower.getY() != y 
					&& gameLogic.getMoney() >= tower.price && gameLogic.getLives() > 0)
				return true;
			
		}
		
		return false;
		
	}
	
	
	
	public double getX() {
		return towerX;
	}

	public void setX(double towerX) {
		this.towerX = towerX;
	}

	public double getY() {
		return towerY;
	}

	public void setsY(double towerY) {
		this.towerY = towerY;
	}
	
	public double getRangeRadius()
	{
		return rangeRadius;
	}
	
	public int getPrice() {
		return super.getPrice();
	}
	
	public void setPrice()
	{
		super.setPrice(price);
	}
	
	public ArrayList<double[]> getTowerCoordinates()
	{
		return towerCoordinates;
	}
	public void addTowerCoordinates(double[] coord)
	{
		towerCoordinates.add(coord);
	}
	

}

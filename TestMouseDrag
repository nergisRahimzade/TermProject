import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Circle;
import java.util.ArrayList;
import java.util.List;
import javafx.geometry.*;


public class TestMouseDrag extends Application {

	double bestTileX = 0;
    double bestTileY = 0;
    
    private static final int WIDTH = 10;
    private static final int HEIGHT = 10;
    private static final int CELL_SIZE = 50;

    private static final List<int[]> lightYellowTiles = new ArrayList<>();
    private static final List<int[]> darkYellowTiles = new ArrayList<>();

    private Rectangle[][] gridCells = new Rectangle[HEIGHT][WIDTH];

    static {
        // Light yellow path tiles
        lightYellowTiles.add(new int[]{2, 0});
        lightYellowTiles.add(new int[]{2, 1});
        lightYellowTiles.add(new int[]{2, 2});
        lightYellowTiles.add(new int[]{2, 3});
        lightYellowTiles.add(new int[]{3, 3});
        lightYellowTiles.add(new int[]{4, 3});
        lightYellowTiles.add(new int[]{5, 3});
        lightYellowTiles.add(new int[]{5, 4});
        lightYellowTiles.add(new int[]{5, 5});
        lightYellowTiles.add(new int[]{5, 6});
        lightYellowTiles.add(new int[]{5, 7});
        lightYellowTiles.add(new int[]{5, 8});
        lightYellowTiles.add(new int[]{5, 9});
    }

    @Override
    public void start(Stage primaryStage) {
        GridPane grid = new GridPane();

        for (int row = 0; row < HEIGHT; row++) {
            for (int col = 0; col < WIDTH; col++) {
                Rectangle rect = new Rectangle(CELL_SIZE, CELL_SIZE);
                boolean isLight = false;

                for (int[] tile : lightYellowTiles) {
                    if (tile[0] == row && tile[1] == col) {
                        isLight = true;
                        break;
                    }
                }

                if (isLight) {
                    rect.setFill(Color.rgb(255, 235, 170)); // Light yellow
                } else {
                    rect.setFill(Color.rgb(255, 204, 0)); // Dark yellow
                    darkYellowTiles.add(new int[]{row, col});
                }

                rect.setStroke(Color.BLACK);
                grid.add(rect, col, row);
                gridCells[row][col] = rect;
            }
        }

        Circle circle = new Circle(20, Color.BLUE);
        circle.setCenterX(100);
        circle.setCenterY(100);

        Pane root = new Pane();

        root.getChildren().addAll(grid, circle);

      //event handler -> setonmousedragged
    	//x = e.getX(), y = e.getY()
    	//check if there exists a dark yellow tile within x+-3, y+-3 range
    	//if there is, check the distance
    	//place the tower to the min distance
    	//x = tile.getX(), y = tile.getY(); e.setX(x), e.setY(y)
    	
        
        //STILL HAS PROBLEMS, DOES NOT WORK(?)
        //LOOKS COMPLEX, GO THROUGH AGAIN
        //this eventHandler places the tower to the appropriate coordinates
        
        Tower tower = new SingleShotTower();
        
        
        circle.setOnMouseDragged(event -> {
			double towerX = event.getSceneX();
			double towerY = event.getSceneY();
			
			
			tower.showRange(tower);
			
			
			ArrayList<Integer> matchingTiles = new ArrayList<>();
			for(int i = 0; i < darkYellowTiles.size(); i++)
			{
				int row = darkYellowTiles.get(i)[1];
				int col = darkYellowTiles.get(i)[0];

				// center of that cell (in pixels)
				double tileCenterX = col * CELL_SIZE + CELL_SIZE/2.0;
				double tileCenterY = row * CELL_SIZE + CELL_SIZE/2.0;

				// bounding box
				double tileLeft   = tileCenterX - CELL_SIZE/2.0;
				double tileRight  = tileCenterX + CELL_SIZE/2.0;
				double tileTop    = tileCenterY - CELL_SIZE/2.0;
				double tileBottom = tileCenterY + CELL_SIZE/2.0;

					
					if(towerX >= tileLeft && towerX <= tileRight
							&& towerY >= tileTop && towerY <= tileBottom)
					{
						matchingTiles.add(i);
					}
			}
			
			 if (matchingTiles.isEmpty()) {
			        // no valid snap -> just follow the mouse
			        circle.setCenterX(towerX);
			        circle.setCenterY(towerY);
			        return;
			    }
			
			if(matchingTiles.size() == 1)
			{
				circle.setCenterX((darkYellowTiles.get(matchingTiles.get(0))[1]));
				circle.setCenterY((darkYellowTiles.get(matchingTiles.get(0))[0]));
			}
			
			else 
			{
			    bestTileX = (darkYellowTiles.get(matchingTiles.get(0)))[1] * CELL_SIZE + CELL_SIZE/2;
				bestTileY = (darkYellowTiles.get(matchingTiles.get(0)))[0]* CELL_SIZE + CELL_SIZE/2;
				double minDistance = Math.sqrt(Math.pow((bestTileX - towerX), 2) + Math.pow((bestTileY - towerY), 2));
				
				
				for(int i = 1; i < matchingTiles.size(); i++)
				{
					double tileX = darkYellowTiles.get(matchingTiles.get(i))[1]* CELL_SIZE + CELL_SIZE/2;
					double tileY = darkYellowTiles.get(matchingTiles.get(i))[0]* CELL_SIZE + CELL_SIZE/2;
					double distance = Math.sqrt(Math.pow((tileX - towerX), 2) + Math.pow((tileY - towerY), 2));
					
					if(distance < minDistance)
					{
						minDistance = distance;
						bestTileX = tileX;
						bestTileY = tileY;
					}	
				}
				

				
			}
			
			circle.setCenterX(towerX);
			circle.setCenterY(towerY);
        });
        
        circle.setOnMouseReleased(e ->
		{
			circle.setCenterX(bestTileX);
			circle.setCenterY(bestTileY);
		});
		

        Scene scene = new Scene(root, 400, 400);
        primaryStage.setTitle("Mouse Drag Example");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
